{"version":3,"sources":["ExpansionPanels.js","AppBar.js","App.js","serviceWorker.js","index.js"],"names":["ControlledExpansionPanels","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","panel","event","expanded","setState","state","seccionPrev","_this2","webs","react_default","a","createElement","className","map","e","index","key","tipo","toUpperCase","ExpansionPanel_default","id","onChange","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","style","display","alignItems","width","Avatar_default","height","borderRadius","marginRight","src","icono","url","Typography_default","nombre","idioma","ExpansionPanelDetails_default","descripcion","href","React","Component","withStyles","theme","root","grow","flexGrow","title","defineProperty","breakpoints","up","search","position","shape","backgroundColor","fade","palette","common","white","&:hover","marginLeft","spacing","unit","searchIcon","pointerEvents","justifyContent","inputRoot","color","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","classes","AppBar_default","Toolbar_default","variant","noWrap","Search_default","InputBase_default","placeholder","input","onchange","App","isFetching","busqueda","filtrarBusqueda","bind","assertThisInitialized","fetch","then","response","json","regex","RegExp","target","value","newWebs","filter","web","match","body","_this$state","length","LinearProgress_default","ExpansionPanels","src_AppBar","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb901357.chunk.js","sourcesContent":["import React from 'react';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport './ExpansionPanel.css';\r\n\r\nclass ControlledExpansionPanels extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            expanded: null,\r\n            seccionPrev: ''\r\n        }\r\n    }\r\n\r\n    handleChange = panel => (event, expanded) => {\r\n        this.setState({\r\n            expanded: expanded ? panel : false,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { expanded } = this.state;\r\n        const { webs } = this.props;\r\n        return (\r\n            <div className=\"evita-menu\">\r\n            \r\n                {\r\n                    \r\n                    webs.map( (e, index) =>\r\n                        <div key={index}>\r\n                            {\r\n                                index > 0 ? e.tipo !== webs[index - 1].tipo ?\r\n                                    <h4 className=\"titulo-tipo\">{e.tipo.toUpperCase()}</h4> :\r\n                                    null :\r\n                                    <h4 className=\"titulo-tipo\">{e.tipo.toUpperCase()}</h4>\r\n                            }\r\n\r\n                                <ExpansionPanel className=\"espacio\" key={e.id} expanded={expanded === 'panel'+e.id} onChange={this.handleChange('panel'+e.id)}>\r\n                                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                                         {/* Ã‘apa sana */}\r\n                                        <div style ={{display: \"inline-flex\" , alignItems: \"center\", width: \"100%\"}}>\r\n                                            <Avatar style={{width: 32, height: 32, borderRadius: 10, marginRight: \"10px\"}} src={e.icono.url}></Avatar>\r\n                                            <Typography>{e.nombre}</Typography>\r\n                                            <span className={e.idioma === 'ES' ? \"idiomaES\" : \"idiomaEN\"}>{e.idioma}</span>\r\n                                        </div>\r\n                                    </ExpansionPanelSummary>\r\n                                    <ExpansionPanelDetails className=\"detalles\">\r\n                                        <Typography>\r\n                                            {e.descripcion}\r\n                                            <br/><br/>\r\n                                            <a href={e.url}>{e.url}</a>\r\n                                        </Typography>\r\n                                    </ExpansionPanelDetails>\r\n                                </ExpansionPanel>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlledExpansionPanels;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        display: 'none',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'block',\r\n        },\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing.unit,\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        width: theme.spacing.unit * 9,\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n        width: '100%',\r\n    },\r\n    inputInput: {\r\n        paddingTop: theme.spacing.unit,\r\n        paddingRight: theme.spacing.unit,\r\n        paddingBottom: theme.spacing.unit,\r\n        paddingLeft: theme.spacing.unit * 10,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: 120,\r\n            '&:focus': {\r\n                width: 200,\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nfunction SearchAppBar(props) {\r\n    const { classes } = props;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar>\r\n                <Toolbar>\r\n                    <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\r\n                        Webs interesantes\r\n                    </Typography>\r\n                    <div className={classes.grow} />\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <SearchIcon />\r\n                        </div>\r\n                        <InputBase\r\n                            placeholder=\"Searchâ€¦\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            onChange={props.onchange}\r\n                        />\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nSearchAppBar.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SearchAppBar);","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ControlledExpansionPanels from './ExpansionPanels';\r\nimport SearchAppBar from './AppBar';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n          webs: [],\r\n          isFetching: true,\r\n          busqueda: []\r\n      };\r\n\r\n      this.filtrarBusqueda = this.filtrarBusqueda.bind(this);\r\n  }\r\n\r\n\r\n  componentWillMount(){\r\n    fetch('https://gist.githubusercontent.com/carmona44/7265da7c5a2e0e53e8e8557f22e1e870/raw/83cf11296dca92e3cd61b0dfdc3baaaca80329f1/webs.json')\r\n        .then(response => response.json())\r\n        .then(webs => this.setState({webs : webs.webs}))\r\n        .then(() => this.setState({ isFetching: false }));\r\n  }\r\n\r\n  filtrarBusqueda(event){\r\n      const regex = new RegExp(event.target.value, 'gi');\r\n      const newWebs = this.state.webs.filter(web => {\r\n          return web.nombre.match(regex);\r\n      });\r\n\r\n      this.setState({\r\n         busqueda: newWebs\r\n      });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { isFetching, webs} = this.state;\r\n    let body;\r\n\r\n    if (webs.length !== 0 && !isFetching) {\r\n      body = <ControlledExpansionPanels webs={this.state.busqueda.length > 0 ? this.state.busqueda : this.state.webs}/>\r\n    } else {\r\n      // TODO\r\n      body = <LinearProgress/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <SearchAppBar onchange={this.filtrarBusqueda}/>\r\n        { body } \r\n        <footer className=\"pie-pagina\">Made on Earth by Human.</footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}